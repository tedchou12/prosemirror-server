var ref = require("prosemirror-model");
var MarkType = ref.MarkType;
var Slice = ref.Slice;
var Fragment = ref.Fragment;

var ref$1 = require("./transform");
var Transform = ref$1.Transform;
var ref$2 = require("./mark_step");
var AddMarkStep = ref$2.AddMarkStep;
var RemoveMarkStep = ref$2.RemoveMarkStep;
var ref$3 = require("./replace_step");
var ReplaceStep = ref$3.ReplaceStep;

// :: (number, number, Mark) → this
// Add the given mark to the inline content between `from` and `to`.
Transform.prototype.addMark = function(from, to, mark) {
  var this$1 = this;

  var removed = [], added = [], removing = null, adding = null
  this.doc.nodesBetween(from, to, function (node, pos, parent, index) {
    if (!node.isInline) { return }
    var marks = node.marks
    if (!mark.isInSet(marks) && parent.contentMatchAt(index).allowsMark(mark.type)) {
      var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)
      var newSet = mark.addToSet(marks)

      for (var i = 0; i < marks.length; i++) {
        if (!marks[i].isInSet(newSet)) {
          if (removing && removing.to == start && removing.mark.eq(marks[i]))
            { removing.to = end }
          else
            { removed.push(removing = new RemoveMarkStep(start, end, marks[i])) }
        }
      }

      if (adding && adding.to == start)
        { adding.to = end }
      else
        { added.push(adding = new AddMarkStep(start, end, mark)) }
    }
  })

  removed.forEach(function (s) { return this$1.step(s); })
  added.forEach(function (s) { return this$1.step(s); })
  return this
}

// :: (number, number, ?union<Mark, MarkType>) → this
// Remove the given mark, or all marks of the given type, from inline
// nodes between `from` and `to`.
Transform.prototype.removeMark = function(from, to, mark) {
  var this$1 = this;
  if ( mark === void 0 ) mark = null;

  var matched = [], step = 0
  this.doc.nodesBetween(from, to, function (node, pos) {
    if (!node.isInline) { return }
    step++
    var toRemove = null
    if (mark instanceof MarkType) {
      var found = mark.isInSet(node.marks)
      if (found) { toRemove = [found] }
    } else if (mark) {
      if (mark.isInSet(node.marks)) { toRemove = [mark] }
    } else {
      toRemove = node.marks
    }
    if (toRemove && toRemove.length) {
      var end = Math.min(pos + node.nodeSize, to)
      for (var i = 0; i < toRemove.length; i++) {
        var style = toRemove[i], found$1 = (void 0)
        for (var j = 0; j < matched.length; j++) {
          var m = matched[j]
          if (m.step == step - 1 && style.eq(matched[j].style)) { found$1 = m }
        }
        if (found$1) {
          found$1.to = end
          found$1.step = step
        } else {
          matched.push({style: style, from: Math.max(pos, from), to: end, step: step})
        }
      }
    }
  })
  matched.forEach(function (m) { return this$1.step(new RemoveMarkStep(m.from, m.to, m.style)); })
  return this
}

// :: (number, number) → this
// Remove all marks and non-text inline nodes from the given range.
Transform.prototype.clearMarkup = function(from, to) {
  var this$1 = this;

  var delSteps = [] // Must be accumulated and applied in inverse order
  this.doc.nodesBetween(from, to, function (node, pos) {
    if (!node.isInline) { return }
    if (!node.type.isText) {
      delSteps.push(new ReplaceStep(pos, pos + node.nodeSize, Slice.empty))
      return
    }
    for (var i = 0; i < node.marks.length; i++)
      { this$1.step(new RemoveMarkStep(Math.max(pos, from), Math.min(pos + node.nodeSize, to), node.marks[i])) }
  })
  for (var i = delSteps.length - 1; i >= 0; i--) { this$1.step(delSteps[i]) }
  return this
}

Transform.prototype.clearNonMatching = function(pos, match) {
  var this$1 = this;

  var node = this.doc.nodeAt(pos)
  var delSteps = [], cur = pos + 1
  for (var i = 0; i < node.childCount; i++) {
    var child = node.child(i), end = cur + child.nodeSize
    var allowed = match.matchType(child.type, child.attrs)
    if (!allowed) {
      delSteps.push(new ReplaceStep(cur, end, Slice.empty))
    } else {
      match = allowed
      for (var j = 0; j < child.marks.length; j++) { if (!match.allowsMark(child.marks[j]))
        { this$1.step(new RemoveMarkStep(cur, end, child.marks[j])) } }
    }
    cur = end
  }
  if (!match.validEnd()) {
    var fill = match.fillBefore(Fragment.empty, true)
    this.replace(cur, cur, new Slice(fill, 0, 0))
  }
  for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) { this$1.step(delSteps[i$1]) }
  return this
}
